# This is a basic workflow to help you get started with Actions

name: Build

# Controls when the workflow will run
on:
  pull_request:
    branches:
      - main 

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-builder:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.TIMSPAT }}

      - name: Build & Push Docker Image 
        uses: docker/build-push-action@6.9.0
        with:
          push: true
          target: build-base01
          tags: ghcr.io/t2thev/emubuilder
          cache-from: type=registry,ref=ghcr.io/t2thev/bkbuilder 
          cache-to: type=registry,ref=ghcr.io/t2thev/bkbuilder,mode=max
          file: progs/dependencies/buildbase.dockerfile

  # This workflow contains a single job called "build"
  build-dolphin:
    needs: build-builder
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.TIMSPAT }}

      - name: Build & Push Docker Image 
        uses: docker/build-push-action@6.9.0
        with:
          push: false
          target: dolphin-dist
          tags: dolphin-build
          outputs: type=docker,dest=/tmp/dolphin-build.tar
          cache-from: type=registry,ref=ghcr.io/t2thev/bkdolphin
          cache-to: type=registry,ref=ghcr.io/t2thev/bkdolphin,mode=max
          file: progs/emulators/dolphin.dockerfile
          build-contexts: build-base01=docker-image://ghcr.io/t2thev/emubuilder:latest
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dolphin-build.tar
          path: /tmp/dolphin-build.tar

  build-openal:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.TIMSPAT }}
          
      - name: Build & Push Docker Image 
        uses: docker/build-push-action@6.9.0
        with:
          push: false
          target: openal-dist
          outputs: type=tar,dest=/tmp/openal-build.tar
          cache-from: type=registry,ref=ghcr.io/t2thev/bkopenal
          cache-to: type=registry,ref=ghcr.io/t2thev/bkopenal,mode=max
          file: progs/dependencies/openal.dockerfile
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: openal-build.tar
          path: /tmp/openal-build.tar

  build-sdl:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.TIMSPAT }}

      - name: Build & Push Docker Image 
        uses: docker/build-push-action@6.9.0
        with:
          push: false
          target: sdl-dist
          outputs: type=tar,dest=/tmp/sdl-build.tar
          cache-from: type=registry,ref=ghcr.io/t2thev/bksdl
          cache-to: type=registry,ref=ghcr.io/t2thev/bksdl,mode=max
          file: progs/dependencies/sdl.dockerfile
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdl-build.tar
          path: /tmp/sdl-build.tar

  build-qt:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.TIMSPAT }}

      - name: Build & Push Docker Image 
        uses: docker/build-push-action@6.9.0
        with:
          push: false
          target: qt-dist
          outputs: type=tar,dest=/tmp/qt-build.tar
          cache-from: type=registry,ref=ghcr.io/t2thev/bkqt
          cache-to: type=registry,ref=ghcr.io/t2thev/bkqt,mode=max
          file: progs/dependencies/qt.dockerfile
          build-contexts: build-base01=docker-image://ghcr.io/t2thev/emubuilder:latest
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: qt-build.tar
          path: /tmp/qt-build.tar

  build-rpcs3:
    needs: 
      - build-builder
      - build-openal
      - build-sdl
      - build-qt
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download openal artifact
        uses: actions/download-artifact@v4
        with:
          name: openal-build.tar
          path: /tmp

      - name: remove openal tar
        run: |
          cd /tmp
          tar xvf openal-build.tar
          rm /tmp/openal-build.tar

      - name: Download sdl artifact
        uses: actions/download-artifact@v4
        with:
          name: sdl-build.tar
          path: /tmp
          
      - name: remove sdl tar
        run: |
          cd /tmp
          tar xvf sdl-build.tar
          rm /tmp/sdl-build.tar

      - name: Download qt artifact
        uses: actions/download-artifact@v4
        with:
          name: qt-build.tar
          path: /tmp

      - name: remove qt tar
        run: |
          cd /tmp
          tar xvf qt-build.tar
          rm /tmp/qt-build.tar

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.TIMSPAT }}

      - name: Build & Push Docker Image 
        uses: docker/build-push-action@6.9.0
        with:
          push: false
          target: rpcs3-dist
          tags: rpcs3-build
          outputs: type=docker,dest=/tmp/rpcs3-build.tar
          cache-from: type=registry,ref=ghcr.io/t2thev/bkrpcs3
          cache-to: type=registry,ref=ghcr.io/t2thev/bkrpcs3,mode=max
          file: progs/emulators/rpcs3.dockerfile
          build-contexts: |
            build-base01=docker-image://ghcr.io/t2thev/emubuilder:latest
            basesdl=/tmp/sdl
            base-openal=/tmp/openal
            qt-base=/tmp/qt-everywhere-src-6.6.3

        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rpcs3-build.tar
          path: /tmp/rpcs3-build.tar

  # This workflow contains a single job called "build"
  build-esde:
    needs: build-builder
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.TIMSPAT }}

      - name: Build & Push Docker Image 
        uses: docker/build-push-action@6.9.0
        with:
          push: false
          target: esde-dist
          tags: esde-build
          outputs: type=docker,dest=/tmp/esde-build.tar
          cache-from: type=registry,ref=ghcr.io/t2thev/bkesde
          cache-to: type=registry,ref=ghcr.io/t2thev/bkesde,mode=max
          file: progs/emulators/es-de.dockerfile
          build-contexts: build-base01=docker-image://ghcr.io/t2thev/emubuilder:latest
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: esde-build.tar
          path: /tmp/esde-build.tar

  build-webtop:
    runs-on: ubuntu-latest
    needs: 
      - build-dolphin
      - build-esde
    steps:
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      - name: Download Dolphin artifact
        uses: actions/download-artifact@v4
        with:
          name: dolphin-build.tar
          path: /tmp

      - name: Load Dolphin image
        run: |
          docker load --input /tmp/dolphin-build.tar
          docker image ls -a
          rm /tmp/dolphin-build.tar
   
      - name: Download ESDE artifact
        uses: actions/download-artifact@v4
        with:
          name: esde-build.tar
          path: /tmp

      - name: Load ESDE image
        run: |
          docker load --input /tmp/esde-build.tar
          docker image ls -a
          rm /tmp/esde-build.tar
         
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.TIMSPAT }}

      - name: Build & Push Docker Image 
        uses: docker/build-push-action@6.9.0
        with:
          push: true
          target: webtop-emulation
          file: images/webtop.dockerfile
          build-contexts: |
            dolphin-dist=docker-image://dolphin-build
            esde=docker-image://esde-build
          tags: ghcr.io/t2thev/esde-docker:webtop-nightly

  build-kasm:
    runs-on: ubuntu-latest
    needs: 
      - build-dolphin
      - build-esde
    steps:
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      - name: Download Dolphin artifact
        uses: actions/download-artifact@v4
        with:
          name: dolphin-build.tar
          path: /tmp

      - name: Load Dolphin image
        run: |
          docker load --input /tmp/dolphin-build.tar
          docker image ls -a
          rm /tmp/dolphin-build.tar
   
      - name: Download ESDE artifact
        uses: actions/download-artifact@v4
        with:
          name: esde-build.tar
          path: /tmp

      - name: Load ESDE image
        run: |
          docker load --input /tmp/esde-build.tar
          docker image ls -a
          rm /tmp/esde-build.tar
         
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.TIMSPAT }}

      - name: Build & Push Docker Image 
        uses: docker/build-push-action@6.9.0
        with:
          push: true
          target: kasm-emulation
          file: images/kasm.dockerfile
          build-contexts: |
            dolphin-dist=docker-image://dolphin-build
            esde=docker-image://esde-build
          tags: ghcr.io/t2thev/esde-docker:kasm-nightly
          
