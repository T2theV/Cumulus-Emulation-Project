# This is a basic workflow to help you get started with Actions

name: Build

on:
  pull_request:
    branches:
      - main 
  push:
    branches:
      - build-json
  workflow_dispatch:

jobs:
  build-builder:
    if: 0
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # - name: Docker Login
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.repository_owner }}
      #     password: ${{ secrets.TIMSPAT }}

      - name: Build & Push Docker Image 
        uses: docker/build-push-action@v5
        with:
          push: true
          target: build-base01
          tags: ghcr.io/t2thev/emubuilder
          # cache-from: ghcr.io/t2thev/bkbuilder 
          # cache-to: ghcr.io/t2thev/bkbuilder
          file: progs/dependencies/buildbase.dockerfile

  fill_emulist_variable:
    outputs: 
      EMULATOR_NAME: ${{ steps.emulator_name.outputs.name }}
    
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: emulator_name
        id: emulator_name
        run: |
          {
            echo 'name<<EOF'
              jq '. | map(.name)' emulators.json
            echo 'EOF' 
          } >> $GITHUB_OUTPUT

  build-emulators:
    needs: 
      - fill_emulist_variable
      # - build-builder
    runs-on: ubuntu-latest
    strategy:
      matrix:
        EMULATOR: ${{ fromJson(needs.fill_emulist_variable.outputs.EMULATOR_NAME) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # - name: Docker Login
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.repository_owner }}
      #     password: ${{ secrets.TIMSPAT }}
      # - name: get-build-parameters
      #   id: get_build_parameters
        # outputs: index
        # run: |
          # index=$(jq '. | map(.name == "${{ matrix.EMULATOR }}") | index(true)' emulators.json)
          # echo $index
          # echo "index=$index" >> $GITHUB_OUTPUT
      
      - name: Get Emulator Vars
        id: get_emu_vars
        run: |
          export index=$(jq '. | map(.name == "${{ matrix.EMULATOR }}") | index(true)' emulators.json)
          emulator_name=$(jq -r ".[$index].name" emulators.json)
          emulator_dockerfile=$(jq -r ".[$index].dockerfile" emulators.json)
          echo emulator_name=$emulator_name >> $GITHUB_OUTPUT
          echo emulator_dockerfile=$emulator_dockerfile >> $GITHUB_OUTPUT

      # - name: Build Emulator
      #   run: |
      #     docker build -t emulator-${{ steps.get_emu_vars.outputs.emulator_name }} -f ${{ steps.get_emu_vars.outputs.emulator_dockerfile }} type=docker,dest=/tmp/type=docker,dest=/tmp/dolphin-build.tar-build.tar .
      
                    

      - name: Build & Push Docker Image 
        uses: docker/build-push-action@v5
        with:
          push: false
          # target: dolphin-dist
          tags: ${{ steps.get_emu_vars.outputs.emulator_name }}-build
          outputs: type=docker,dest=/tmp/${{ steps.get_emu_vars.outputs.emulator_name }}-build.tar
          # cache-from: ghcr.io/t2thev/bkdolphin
          # cache-to: ghcr.io/t2thev/bkdolphin
          file: ${{ steps.get_emu_vars.outputs.emulator_dockerfile}}
          # build-contexts: build-base01=docker-image://ghcr.io/t2thev/emubuilder:latest
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get_emu_vars.outputs.emulator_name }}-build.tar
          path: /tmp/${{ steps.get_emu_vars.outputs.emulator_name }}-build.tar

  build-webtop:
    if: 0
    runs-on: ubuntu-latest
    needs: build-emulators
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dolphin-build.tar
          path: /tmp
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker
  
      # - name: unzip image
      #   run: |
      #     mkdir dolphin-build
      #     tar -xvf /tmp/dolphin-build.tar -C dolphin-build

      - name: Load image
        run: |
          docker load --input /tmp/dolphin-build.tar
          docker image ls -a         
      
      # - name: Docker Login
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.repository_owner }}
      #     password: ${{ secrets.TIMSPAT }}

      - name: Build & Push Docker Image 
        uses: docker/build-push-action@v5
        with:
          push: true
          target: webtop-emulation
          file: images/webtop.dockerfile
          build-contexts: dolphin-dist=docker-image://dolphin-build
          tags: ghcr.io/t2thev/esde-docker:webtop-nightly
          
